* A little of theory

** Spatial Database


- Storage of spatial data
- Analysis of geographic data
- Manipulation of spatial objects just like the other database objects
  - Creation of subsets of data
  - Fixing geographic data
- Database backend for apps

** Spatial data

- Data which describes or represents either a location or a shape

- Points, Lines, Polygons

- Besides the geometrical properties, the spatial data has attributes.

** Spatial data

- Examples:
  - Geocodable address
  - Crime patterns
  - EMS / patient location
  - Weather information
  - City planning
  - Hazard detection

** Relationships

- Proximity
- Adjacency (touching,connectivity)
- Containment

** Operations

- Area
- Length
- Intersection
- Union
- Buffer


** Why a db instead of a file?

Spatial data is usually related to other types of data.

** How load data to the db?

- `shp2pgsql`
  - Imports standard *ESRI* shapefiles and `DBF`

- `ogr2ogr`
  - Imports 20 different vector and flat files


** The spatial data that is not spatial data

| Longitude |   Latitude | Disease | Date       |
|-----------+------------+---------+------------|
| 26.870436 | -31.909519 | Mumps   | 13/12/2008 |
| 26.868682 | -31.909259 | Mumps   | 24/12/2008 |
| 26.867707 | -31.910494 | Mumps   | 22/01/2009 |
| 26.854908 | -31.920759 | Measles | 11/01/2009 |
| 26.855817 | -31.921929 | Measles | 26/01/2009 |
| 26.852764 | -31.921929 | Measles | 10/02/2009 |
| 26.854778 | -31.925112 | Measles | 22/02/2009 |
| 26.869072 | -31.911988 | Mumps   | 02/02/2009 |

(The ~disease~  and ~date~ columns are the *attributes* of this data)

** /Shape files/

- Stored in files on the computer
- The most common one is probably the 'shape file'
  - It consists of at least three different files that work together to store vector data

| Extension | Description         |
|-----------+---------------------|
| ~.shp~    | The geometry file   |
| ~.dbf~    | The attributes file |
| ~.shx~    | Index file          |



** Vector data

- Is stored as a series of X,Y coordinate pairs inside the computer's memory.
- Vector data is used to represent points (1 vertex) , lines (polyline) (2 or more vertices, but the first and the last one are different) and areas (polygons)..
- A vector feature has its shape represented using geometry.
- The geometry is made up of one or more interconnected vertices.
- A vertex describes a position in space using an x, y and optionally z axis.
- The X and Y values will depend on the Coordinate Reference System (CRS) being used.

** Problems with vector data

#+CAPTION: Image from /A Genle introduction to GIS/ *Sutton T., Dassau O., Sutton M.* ~2009~
[[file:./images/sliver.png]]


#+CAPTION: Image from /A Genle introduction to GIS/ *Sutton T., Dassau O., Sutton M.* ~2009~
[[file:images/overshoot_undershoot.png]]

** Raster data

- Stored as a grid of values
- Each /cell/ or /pixel/ represents a geographical region, and the value of the pixel represents some attribute of the region
- Use it when you want to represent a continuous information across an area
- Multi-band images, each band contains different information

#+CAPTION: Image from /A Genle introduction to GIS/ *Sutton T., Dassau O., Sutton M.* ~2009~
[[file:images/raster.png]]


** Problems with raster data

- High resolution raster data requires a huge amount of computer storage.


* Demo / Exercise

** Connect to the db

#+BEGIN_SRC :eval never
Host:  gis-tutorial.c5faqozfo86k.us-west-2.rds.amazonaws.com
Port: 5432
Username: dssg_gis
Password: dssg-gis
DB Name:gis_tutorial
#+END_SRC


#+BEGIN_SRC sh :eval never
ssh -fNT -L 8889:gis-tutorial.c5faqozfo86k.us-west-2.rds.amazonaws.com:5432 -i ~/.ssh/dssg-2016 sedesol.dssg.io  ## ssh tunneling
#+END_SRC


#+BEGIN_SRC sh :eval never
psql -h localhost -p 8889 -U dssg_gis  gis_tutorial
#+END_SRC

** Setup

- Create an ~schema~ using your ~github~ account
  - (mine is ~nanounanue~)

#+BEGIN_SRC sql :eval never
create schema nanounanue;
#+END_SRC

** Upload the shapefiles

- There are several /shapefiles/ in the ~data~ directory

- We can see some information from the files
#+BEGIN_SRC sh :eval never
ogr2ogr -al roads.shp
#+END_SRC

Observe that the projection is

#+BEGIN_SRC sh :eval never
...
PROJCS["NAD83_Massachusetts_Mainland",
    GEOGCS["GCS_North_American_1983",
        DATUM["North_American_Datum_1983",
            SPHEROID["GRS_1980",6378137,298.257222101]],
        PRIMEM["Greenwich",0],
        UNIT["Degree",0.017453292519943295]],
    PROJECTION["Lambert_Conformal_Conic_2SP"],
    PARAMETER["standard_parallel_1",42.68333333333333],
    PARAMETER["standard_parallel_2",41.71666666666667],
    PARAMETER["latitude_of_origin",41],
    PARAMETER["central_meridian",-71.5],
    PARAMETER["false_easting",200000],
    PARAMETER["false_northing",750000],
    UNIT["Meter",1]]
...
#+END_SRC

This projection measures the *area* in meters. But

- Using ~shp2psql~ tool upload the following files: ~roads~, ~land~, ~hydrology~

#+BEGIN_SRC sh :eval never
shp2psql --host=localhost --port=8889 --username=dssg_gis -f roads.shp gis tutorial.roads
## If you want to change the projection to WGS 1984 (The one used in Google Maps) you need to add
## the flag -s 26986:4326 before the name of the database (gis)
#+END_SRC

If you open *QGIS* you should see something like the following:

[[file:images/before.png]]

and after some customization:

[[file:images/after.png]]

Note that we have /lands/ over the /roads/ and over the /water/.

** Spatial operations for cleaning
