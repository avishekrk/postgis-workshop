* A little of theory

** Spatial database


- Storage of spatial data
- Analysis of geographic data
- Manipulation of spatial objects just like the other database objects
  - Creation of subsets of data
  - Fixing geographic data
  - $\ldots$
- Database backend for apps

** Spatial data

- Data which describes or represents either a location or a shape

- Points, lines, polygons

- Besides the geometrical properties, the spatial data has attributes.

** Spatial data

- Examples:
  - Geocodable address
  - Crime patterns
  - EMS / patient location
  - Weather information
  - City planning
  - Hazard detection

** Relationships

- Proximity
- Adjacency (touching, connectivity)
- Containment

** Operations

- Area
- Length
- Intersection
- Union
- Buffer


** Why a db instead of a file?

Spatial data is usually related to other types of data.

** How load data to the db?

- `shp2pgsql`
  - imports standard *esri* shapefiles and `dbf`

- `ogr2ogr`
  - imports 20 different vector and flat files


** The spatial data that is not spatial data

| longitude |   latitude | disease | date       |
|-----------+------------+---------+------------|
| 26.870436 | -31.909519 | mumps   | 13/12/2008 |
| 26.868682 | -31.909259 | mumps   | 24/12/2008 |
| 26.867707 | -31.910494 | mumps   | 22/01/2009 |
| 26.854908 | -31.920759 | measles | 11/01/2009 |
| 26.855817 | -31.921929 | measles | 26/01/2009 |
| 26.852764 | -31.921929 | measles | 10/02/2009 |
| 26.854778 | -31.925112 | measles | 22/02/2009 |
| 26.869072 | -31.911988 | mumps   | 02/02/2009 |

(the ~disease~  and ~date~ columns are the *attributes* of this data)

** /shape files/

- Stored in files on the computer
- The most common one is probably the 'shape file'
  - It consists of at least three different files that work together to store vector data

| extension | description         |
|-----------+---------------------|
| ~.shp~    | the geometry file   |
| ~.dbf~    | the attributes file |
| ~.shx~    | index file          |



** Vector data

- Is stored as a series of x,y coordinate pairs inside the computer's memory.
- Vector data is used to represent points (1 vertex) , lines (polyline) (2 or more vertices, but the first and the last one are different) and areas (polygons)..
- A vector feature has its shape represented using geometry.
- The geometry is made up of one or more interconnected vertices.
- A vertex describes a position in space using an x, y and optionally z axis.
- The x and y values will depend on the coordinate reference system (crs) being used.

** Problems with vector data

#+caption: Image from /a genle introduction to gis/ *sutton t., dassau o., sutton m.* ~2009~
[[file:./images/sliver.png]]


#+caption: Image from /a genle introduction to gis/ *sutton t., dassau o., sutton m.* ~2009~
[[file:images/overshoot_undershoot.png]]

** Raster data

- Stored as a grid of values
- Each /cell/ or /pixel/ represents a geographical region, and the value of the pixel represents some attribute of the region
- Use it when you want to represent a continuous information across an area
- /Multi-band/ images, each /band/ contains different information

#+caption: Image from /a genle introduction to gis/ *sutton t., dassau o., sutton m.* ~2009~
[[file:images/raster.png]]


** Problems with raster data

- High resolution raster data requires a huge amount of computer storage.


* Demo / exercise

** Connect to the db

#+BEGIN_SRC sh :eval never
host:  gis-tutorial.c5faqozfo86k.us-west-2.rds.amazonaws.com
port: 5432
username: dssg_gis
password: dssg-gis
db name:gis_tutorial
#+END_SRC


#+BEGIN_SRC sh :eval never
ssh -fnt -l 8889:gis-tutorial.c5faqozfo86k.us-west-2.rds.amazonaws.com:5432 -i ~/.ssh/dssg-2016 sedesol.dssg.io  ## ssh tunneling
#+END_SRC


#+BEGIN_SRC sh :eval never
psql -h localhost -p 8889 -u dssg_gis  gis_tutorial
#+END_SRC

** Setup

- create an ~schema~ using your ~github~ account
  - (mine is ~nanounanue~)

#+BEGIN_SRC sql :eval never
create schema nanounanue;
#+END_SRC

** Upload the first shapefiles

- There are several /shapefiles/ in the ~data~ directory

- First, we can see some information from the files

#+BEGIN_SRC sh :eval never
ogrinfo -al roads.shp
#+END_SRC

Observe that the projection is

#+BEGIN_SRC sh :eval never
...
projcs["nad83_massachusetts_mainland",
    geogcs["gcs_north_american_1983",
        datum["north_american_datum_1983",
            spheroid["grs_1980",6378137,298.257222101]],
        primem["greenwich",0],
        unit["degree",0.017453292519943295]],
    projection["lambert_conformal_conic_2sp"],
    parameter["standard_parallel_1",42.68333333333333],
    parameter["standard_parallel_2",41.71666666666667],
    parameter["latitude_of_origin",41],
    parameter["central_meridian",-71.5],
    parameter["false_easting",200000],
    parameter["false_northing",750000],
    unit["meter",1]]
...
#+END_SRC

This projection measures the *area* in meters. but

- Using ~shp2psql~ tool upload the following files: ~roads~, ~land~, ~hydrology~

#+BEGIN_SRC sh :eval never
shp2psql --host=localhost --port=8889 --username=dssg_gis -f roads.shp gis tutorial.roads | psql -h localhost -p 8889 -u dssg_gis  gis_tutorial
## if you want to change the projection to wgs 1984 (the one used in google maps) you need to add
## the flag -s 26986:4326 before the name of the database (gis)
#+END_SRC

If you open *QGIS* you should see something like the following:

#+caption: ~land~ (purple), ~hydrology~ (red) and ~roads~ (blue) after their insertion in the database
[[file:images/before.png]]

and after some customization:

#+caption: After adjusting the style in *QGIS*: ~land~ (one color per type), ~hydrology~ (blue) and ~roads~ (yellow)
[[file:images/after.png]]

note that we have /lands/ over the /roads/ and over the /water/.

** Spatial operations for cleaning

- We will use ~st_intersects()~  and ~st_dwithin()~ for removing the land which
  is touch with roads and water, and if it is too far of roads and water, respectively

- See the file [[file:sql/unviable_land.sql]] for the ~sql~ statements.

- *NOTE:* For use of the ~EXISTS(subquery)~ look [[http://www.techonthenet.com/postgresql/exists.php][here]] and [[https://www.postgresql.org/docs/9.5/static/functions-subquery.html][here]]

#+caption: After removing the land objects which intersects roads or water or where too far from those.
[[file:images/after_2.png]]

- ~St_intersects(a,b)~  returns ~true~  if exists at least one point in common between the geometrical objects ~a~ and ~b~.

- ~St_dwithin(a,b,distance)~ returns ~true~ if the geometries ~a~ and ~b~ are within the specified distance of one another.

- Other functions: ~st_equals~, ~st_disjoint~, ~st_touches~, ~st_crosses~, ~st_overlaps~, ~st_contains~.

** Add more data: ~buildings~ and ~residents~

Upload to the database the shapefiles ~buildings~ and ~residents~.

#+BEGIN_SRC sh :eval never
## This time I will use ogr2ogr, but this is for demostration purpose only
## It is easier use shp2pgsql
ogr2ogr -f "PostgreSQL" PG:"host=localhost user=dssg_gis dbname=gis_tutorial password=dssg-gis port=8889" buildings.shp -nln tutorial.buildings
#+END_SRC
